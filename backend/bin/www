#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('backend:server')
const http = require('http')
const mongoose = require('mongoose')
const config = require('config')
const CrawlerManager = require('./CrawlerManager')
const { MQService } = require('../services')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

initApp(app)

/**
 * Init the app. Make sure db is connected before serving
 */
async function initApp(app) {
  try {
    const host = process.env.DB_HOST || config.get('DB').host
    const port = process.env.DB_PORT || config.get('DB').port
    const dbName = process.env.DB_NAME || config.get('DB').dbName
    // const { host, port, dbName } = config.get('DB')
    console.log("==== connecting to DB ====")
    await mongoose.connect(`mongodb://${host}:${port}/${dbName}`, { useNewUrlParser: true, useUnifiedTopology: true, useFindAndModify: false })
    console.log("===== DB connected. =====")
  } catch (error) {
    console.error("===== Failed to connect to DB =====")
    console.error(error.message)
    console.error("===== shutting down =====")
    process.exit()
  }

  /**
   * Listen on record created event if working in standalone mode
   */
  let standaloneMode = config.get('standalone')
  if(process.env.STANDALONE_MODE) {
    switch (process.env.STANDALONE_MODE){
      case 'true':
        standaloneMode = true
        break
      case 'false':
        standaloneMode = false
        break
    }
  }
  if (standaloneMode) CrawlerManager.start()
  // other wise connect to the RabbitMQ
  else {
    try {
      let { connection, channel } = await MQService.connect()
    } catch (error) {
      console.error("==== Failed to connect to RabbitMQ ====")
      console.error(error.message)
      console.error("==== shutting down ====")
      process.exit()
    }
  }

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break;
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
